package dynamic

// Code generated by centrifuge. DO NOT EDIT.

import (
	"github.com/traefik/genconf/dynamic/tls"
	"github.com/traefik/genconf/dynamic/types"
)

type Cookie struct {
	Name     string `json:"name,omitempty"`
	Secure   bool   `json:"secure,omitempty"`
	HTTPOnly bool   `json:"httpOnly,omitempty"`
	SameSite string `json:"sameSite,omitempty"`
}

type Failover struct {
	Service     string       `json:"service,omitempty"`
	Fallback    string       `json:"fallback,omitempty"`
	HealthCheck *HealthCheck `json:"healthCheck,omitempty"`
}

type ForwardingTimeouts struct {
	DialTimeout           string `json:"dialTimeout,omitempty"`
	ResponseHeaderTimeout string `json:"responseHeaderTimeout,omitempty"`
	IdleConnTimeout       string `json:"idleConnTimeout,omitempty"`
	ReadIdleTimeout       string `json:"readIdleTimeout,omitempty"`
	PingTimeout           string `json:"pingTimeout,omitempty"`
}

type HTTPConfiguration struct {
	Routers           map[string]*Router           `json:"routers,omitempty"`
	Services          map[string]*Service          `json:"services,omitempty"`
	Middlewares       map[string]*Middleware       `json:"middlewares,omitempty"`
	Models            map[string]*Model            `json:"models,omitempty"`
	ServersTransports map[string]*ServersTransport `json:"serversTransports,omitempty"`
}

type HealthCheck struct {
}

type MirrorService struct {
	Name    string `json:"name,omitempty"`
	Percent int    `json:"percent,omitempty"`
}

type Mirroring struct {
	Service     string          `json:"service,omitempty"`
	MaxBodySize *int64          `json:"maxBodySize,omitempty"`
	Mirrors     []MirrorService `json:"mirrors,omitempty"`
	HealthCheck *HealthCheck    `json:"healthCheck,omitempty"`
}

type Model struct {
	Middlewares []string         `json:"middlewares,omitempty"`
	TLS         *RouterTLSConfig `json:"tls,omitempty"`
}

type ResponseForwarding struct {
	FlushInterval string `json:"flushInterval,omitempty"`
}

type Router struct {
	EntryPoints []string         `json:"entryPoints,omitempty"`
	Middlewares []string         `json:"middlewares,omitempty"`
	Service     string           `json:"service,omitempty"`
	Rule        string           `json:"rule,omitempty"`
	Priority    int              `json:"priority,omitempty"`
	TLS         *RouterTLSConfig `json:"tls,omitempty"`
}

type RouterTLSConfig struct {
	Options      string         `json:"options,omitempty"`
	CertResolver string         `json:"certResolver,omitempty"`
	Domains      []types.Domain `json:"domains,omitempty"`
}

type Server struct {
	URL string `json:"url,omitempty"`
}

type ServerHealthCheck struct {
	Scheme          string            `json:"scheme,omitempty"`
	Path            string            `json:"path,omitempty"`
	Method          string            `json:"method,omitempty"`
	Port            int               `json:"port,omitempty"`
	Interval        string            `json:"interval,omitempty"`
	Timeout         string            `json:"timeout,omitempty"`
	Hostname        string            `json:"hostname,omitempty"`
	FollowRedirects *bool             `json:"followRedirects"`
	Headers         map[string]string `json:"headers,omitempty"`
}

type ServersLoadBalancer struct {
	Sticky             *Sticky             `json:"sticky,omitempty"`
	Servers            []Server            `json:"servers,omitempty"`
	HealthCheck        *ServerHealthCheck  `json:"healthCheck,omitempty"`
	PassHostHeader     *bool               `json:"passHostHeader"`
	ResponseForwarding *ResponseForwarding `json:"responseForwarding,omitempty"`
	ServersTransport   string              `json:"serversTransport,omitempty"`
}

type ServersTransport struct {
	ServerName          string              `json:"serverName,omitempty"`
	InsecureSkipVerify  bool                `json:"insecureSkipVerify,omitempty"`
	RootCAs             []string            `json:"rootCAs,omitempty"`
	Certificates        tls.Certificates    `json:"certificates,omitempty"`
	MaxIdleConnsPerHost int                 `json:"maxIdleConnsPerHost,omitempty"`
	ForwardingTimeouts  *ForwardingTimeouts `json:"forwardingTimeouts,omitempty"`
	DisableHTTP2        bool                `json:"disableHTTP2,omitempty"`
	PeerCertURI         string              `json:"peerCertURI,omitempty"`
}

type Service struct {
	LoadBalancer *ServersLoadBalancer `json:"loadBalancer,omitempty"`
	Weighted     *WeightedRoundRobin  `json:"weighted,omitempty"`
	Mirroring    *Mirroring           `json:"mirroring,omitempty"`
	Failover     *Failover            `json:"failover,omitempty"`
}

type Sticky struct {
	Cookie *Cookie `json:"cookie,omitempty"`
}

type WRRService struct {
	Name   string `json:"name,omitempty"`
	Weight *int   `json:"weight,omitempty"`
}

type WeightedRoundRobin struct {
	Services    []WRRService `json:"services,omitempty"`
	Sticky      *Sticky      `json:"sticky,omitempty"`
	HealthCheck *HealthCheck `json:"healthCheck,omitempty"`
}
