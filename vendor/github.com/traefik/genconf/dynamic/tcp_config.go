package dynamic

// Code generated by centrifuge. DO NOT EDIT.

import (
	"github.com/traefik/genconf/dynamic/types"
)

type ProxyProtocol struct {
	Version int `json:"version,omitempty"`
}

type RouterTCPTLSConfig struct {
	Passthrough  bool           `json:"passthrough"`
	Options      string         `json:"options,omitempty"`
	CertResolver string         `json:"certResolver,omitempty"`
	Domains      []types.Domain `json:"domains,omitempty"`
}

type TCPConfiguration struct {
	Routers     map[string]*TCPRouter     `json:"routers,omitempty"`
	Services    map[string]*TCPService    `json:"services,omitempty"`
	Middlewares map[string]*TCPMiddleware `json:"middlewares,omitempty"`
}

type TCPRouter struct {
	EntryPoints []string            `json:"entryPoints,omitempty"`
	Middlewares []string            `json:"middlewares,omitempty"`
	Service     string              `json:"service,omitempty"`
	Rule        string              `json:"rule,omitempty"`
	Priority    int                 `json:"priority,omitempty"`
	TLS         *RouterTCPTLSConfig `json:"tls,omitempty"`
}

type TCPServer struct {
	Address string `json:"address,omitempty"`
}

type TCPServersLoadBalancer struct {
	TerminationDelay *int           `json:"terminationDelay,omitempty"`
	ProxyProtocol    *ProxyProtocol `json:"proxyProtocol,omitempty"`
	Servers          []TCPServer    `json:"servers,omitempty"`
}

type TCPService struct {
	LoadBalancer *TCPServersLoadBalancer `json:"loadBalancer,omitempty"`
	Weighted     *TCPWeightedRoundRobin  `json:"weighted,omitempty"`
}

type TCPWRRService struct {
	Name   string `json:"name,omitempty"`
	Weight *int   `json:"weight,omitempty"`
}

type TCPWeightedRoundRobin struct {
	Services []TCPWRRService `json:"services,omitempty"`
}
